import { t } from 'i18next';

export const getAllFields = () => ({
  fields: [
    {
      name: 'TYPE',
      required: true,
      displayName: t('TYPE'),
      description: t('TYPE_DESCRIPTION'),
      example: 'ROT',
      validation: (value: string) =>
        ['ROT', 'TOOL', 'CONS', 'CHEM', 'GSE'].includes(value),
    },
    {
      name: 'PART_NUMBER',
      required: true,
      description: t('PART_NUMBER_DESCRIPTION'),
      example: 'ABC-123',
      width: 20,
      validation: (value: string) => value && value.length > 0,
      displayName: t('PART_NUMBER'),
    },
    {
      name: 'DESCRIPTION',
      required: true,
      description: t('DESCRIPTION_DESCRIPTION'),
      example: 'Aircraft wheel assembly',
      width: 40,
      displayName: t('DESCRIPTION'),
    },
    {
      name: 'GROUP',
      required: true,
      description: t('GROUP_DESCRIPTION'),
      example: 'ROTABLE',
      width: 15,
      displayName: t('GROUP'),
    },
    {
      name: 'UNIT_OF_MEASURE',
      required: true,
      description: t('UNIT_OF_MEASURE_DESCRIPTION'),
      example: 'EA',
      width: 15,
      displayName: t('UNIT_OF_MEASURE'),
    },
    {
      name: 'ADD_UNIT_OF_MEASURE',
      required: false,
      description: t('ADD_UNIT_OF_MEASURE_DESCRIPTION'),
      example: 'шт',
      width: 20,
      displayName: t('ADD_UNIT_OF_MEASURE'),
    },
    {
      name: 'ADD_DESCRIPTION',
      required: false,
      displayName: t('ADD_DESCRIPTION'),
      description: t('ADD_DESCRIPTION_DESCRIPTION'),
      example: 'Aircraft wheel assembly',
      width: 40,
    },
    {
      name: 'SERIAL_NUMBER',
      required: false,
      displayName: t('SERIAL_NUMBER'),
      description: t('SERIAL_NUMBER_DESCRIPTION'),
      example: 'SN12345',
      width: 20,
    },
    {
      name: 'LIFE_LIMIT',
      displayName: t('LIFE_LIMIT'),
      required: false,
      description: t('LIFE_LIMIT_DESCRIPTION'),
      example: '10000',
      width: 15,
    },
    {
      name: 'LIFE_LIMIT_UNIT',
      displayName: t('LIFE_LIMIT_UNIT'),
      required: false,
      description: t('LIFE_LIMIT_UNIT_DESCRIPTION'),
      example: 'FH',
      width: 15,
    },

    {
      name: 'MIN_STOCK',
      required: false,
      displayName: t('MIN_STOCK'),
      description: t('MIN_STOCK_DESCRIPTION'),
      example: '5',
      width: 15,
    },
  ],
  templateFileName: 'parts_import_template.xlsx',
  additionalInstructions: [
    {
      title: t('TYPE_DESCRIPTION'),
      content: [
        'ROT - Ротируемый',
        'TOOL - Инструмент',
        'CONS - Расходный',
        'CHEM - Химия',
        'GSE - Наземное оборудование',
      ],
    },
    {
      title: t('GROUP_DESCRIPTION'),
      content: [
        'ROTABLE - Ротируемые',
        'TOOL - Инструменты',
        'CONSUMABLE - Расходные',
        'CHEMICAL - Химия',
        'GSE - Наземное оборудование',
      ],
    },
    {
      title: t('TYPE_SPECIFIC_DESCRIPTION'),
      content: [
        'Для ROT (Ротируемые):',
        '- SERIAL_NUMBER обязателен',
        '- LIFE_LIMIT и LIFE_LIMIT_UNIT опциональны',
        '',
        'Для CONS (Расходные):',
        '- SHELF_LIFE обязателен',
        '- MIN_STOCK опционален',
        '',
        'Для CHEM (Химия):',
        '- SHELF_LIFE обязателен',
        '- HAZMAT обязателен',
        '',
        'Для TOOL (Инструменты):',
        '- SERIAL_NUMBER обязателен',
        '- CALIBRATION_DUE опционален',
        '',
        'Для GSE:',
        '- SERIAL_NUMBER обязателен',
        '- NEXT_CHECK опционален',
      ],
    },
  ],
  exampleData: [
    {
      PART_NUMBER: 'ABC-123',
      DESCRIPTION: 'Aircraft wheel assembly',
      TYPE: 'ROT',
      GROUP: 'ROTABLE',
      UNIT_OF_MEASURE: 'EA',
      ADD_UNIT_OF_MEASURE: 'BOX',
      SERIAL_NUMBER: 'SN12345',
      LIFE_LIMIT: '10000',
      LIFE_LIMIT_UNIT: 'FH',
    },
    {
      PART_NUMBER: 'CHEM-001',
      DESCRIPTION: 'Cleaning solution',
      TYPE: 'CHEM',
      GROUP: 'CHEMICAL',
      UNIT_OF_MEASURE: 'L',
      SHELF_LIFE: '2024-12-31',
      HAZMAT: 'UN1234',
      MIN_STOCK: '5',
    },
  ],
  dependencyRules: [
    {
      validate: (row: any) => ({
        isValid: !(row.TYPE === 'ROT' && !row.SERIAL_NUMBER),
        messageKey: 'VALIDATION.TYPE_SPECIFIC.ROT.SERIAL_REQUIRED',
      }),
    },
    {
      validate: (row: any) => ({
        isValid: !(row.TYPE === 'CHEM' && !row.HAZMAT),
        messageKey: 'VALIDATION.TYPE_SPECIFIC.CHEM.HAZMAT_REQUIRED',
      }),
    },
  ],
});
