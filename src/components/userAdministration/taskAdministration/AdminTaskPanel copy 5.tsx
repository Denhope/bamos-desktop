//@ts-nocheck

// –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
const tableStyles = {
  '.zones-table .ant-table-tbody > tr > td': {
    padding: '8px 4px',
    verticalAlign: 'top',
  },
  '.zones-table .ant-table-tbody > tr': {
    height: 'auto',
    minHeight: '40px',
  },
  '.zones-table .ant-table-cell': {
    wordBreak: 'break-word',
  },
};

import React, { useEffect, useMemo, useState } from 'react';
import {
  Button,
  Row,
  Col,
  Modal,
  message,
  Space,
  Spin,
  Empty,
  Switch,
  notification,
  Table,
  Tag,
} from 'antd';
import { PlusSquareOutlined, MinusSquareOutlined } from '@ant-design/icons';
import { useTranslation } from 'react-i18next';
import { TaskFilteredFormValues } from './AdminTaskFilterdForm';
import { useTypedSelector } from '@/hooks/useTypedSelector';

import AdminTaskPanelTree from './AdminTaskPanelTree';
import AdminTaskPanelForm from './AdminTaskPanelForm';
import { ITask, ITaskResponce } from '@/models/ITask';
import { Split } from '@geoffcox/react-splitter';
import FileUploader from '@/components/shared/FileUploader';
import UniversalAgGrid from '@/components/shared/UniversalAgGrid';
import {
  getTaskTypeColor,
  transformToITask,
  ValueEnumTypeTask,
} from '@/services/utilites';
import { useGetPartNumbersQuery } from '@/features/partAdministration/partApi';
import PermissionGuard, { Permission } from '@/components/auth/PermissionGuard';
import { useGlobalState } from '@/components/woAdministration/GlobalStateContext';
import {
  useAddMultiTaskItemsMutation,
  useAddTaskMutation,
  useDeleteTaskMutation,
  useGetTasksQuery,
  useUpdateTaskMutation,
} from '@/features/tasksAdministration/tasksApi';
import FileUploaderV2 from '@/components/shared/FileUploaderV2';
import { useGetACTypesQuery } from '@/features/acTypeAdministration/acTypeApi';
import { useGetMPDCodesQuery } from '@/features/MPDAdministration/mpdCodesApi';
import { useGetGroupTaskCodesQuery } from '@/features/tasksAdministration/taskCodesApi';
import { useGetSkillsQuery } from '@/features/userAdministration/skillApi';
import { useGetFilteredZonesQuery } from '@/features/zoneAdministration/zonesApi';
import ZonesTab from './ZonesTab';
import styles from './AdminTaskPanel.module.css';

import { useAddMultiPartTasksMutation } from '@/features/tasksAdministration/partApi';

interface AdminPanelProps {
  values: TaskFilteredFormValues;
  isLoadingF?: boolean;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ValidationResult
interface ValidationResult {
  row: number;
  status: 'success' | 'error';
  fieldErrors: {
    fieldName: string;
    value: string;
    message: string;
  }[];
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface AdditionalSelect {
  key: string;
  label: string;
  options: { value: string; label: string }[];
  mode?: 'multiple' | undefined;
  required?: boolean;
  disabled?: boolean;
  width?: number;
  dependsOn?: string;
  onChange?: (value: any) => void;
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
interface IntervalCode {
  code: string;
  description: string;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
const validIntervals = [
  '1C',
  '2A',
  '2C',
  '4C',
  '8A',
  '8C',
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  'FC',
  'FH',
  'MO',
  'YR',
  'WK',
  'DY',
];

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
const validateInterval = (interval: string): boolean => {
  if (!interval) return false;

  const trimmedInterval = interval.trim().toUpperCase();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã (1C, 2A, 8A –∏ —Ç.–¥.)
  if (validIntervals.includes(trimmedInterval)) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (3000 FC, 5000 FH –∏ —Ç.–¥.)
  const standardPattern = /^\d+\s*(FC|FH|MO|YR|WK|DY)$/i;
  return standardPattern.test(trimmedInterval);
};

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
const getIntervalsConfig = () => ({
  title: 'INTERVALS',
  type: 'table',
  headers: ['Code', 'Description', 'Example'],
  content: [
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    ['FC', 'Flight Cycles', '3000 FC'],
    ['FH', 'Flight Hours', '5000 FH'],
    ['MO', 'Months', '12 MO'],
    ['YR', 'Years', '2 YR'],
    ['WK', 'Weeks', '6 WK'],
    ['DY', 'Days', '30 DY'],
    // –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã
    ['1C', 'Check 1', '1C'],
    ['2A', 'Check 2A', '2A'],
    ['2C', 'Check 2C', '2C'],
    ['4C', 'Check 4C', '4C'],
    ['8A', 'Check 8A', '8A'],
    ['8C', 'Check 8C', '8C'],
  ],
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
const translations = {
  ru: {
    VALIDATION: {
      INVALID_INTERVAL_FORMAT:
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {{value}}. –ü—Ä–∏–º–µ—Ä—ã: 3000 FC, 5000 FH, 12 MO, 1C, 2A, 8C',
      INVALID_INTERVAL_REPEAT_FORMAT:
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {{value}}. –ü—Ä–∏–º–µ—Ä—ã: 3000 FC, 5000 FH, 12 MO, 1C, 2A, 8C',
      INTERVAL_REQUIRED: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
      INTERVAL_REPEAT_REQUIRED:
        '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
      TASK_NUMBER_REQUIRED: '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
      TASK_DESCRIPTION_REQUIRED: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
      INVALID_TASK_CODE: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞—á–∏: {{code}}',
      INVALID_ZONES:
        '–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–¥—ã –∑–æ–Ω: {{codes}}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã: {{availableZones}}',
      SKILL_CODES_REQUIRED: '–ö–æ–¥—ã –Ω–∞–≤—ã–∫–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
    },
    FIELD: {
      taskNumber: '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏',
      taskDescription: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
      code: '–ö–æ–¥ –∑–∞–¥–∞—á–∏',
      ZONE: '–ó–æ–Ω–∞',
      skillCodeID: '–ö–æ–¥ –Ω–∞–≤—ã–∫–∞',
      INTERVAL: '–ò–Ω—Ç–µ—Ä–≤–∞–ª',
      INTERVAL_REPEAT: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
      // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    },
  },
};

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–æ–Ω
interface Zone {
  _id: string;
  majoreZoneNbr: string;
  subZoneNbr?: string;
  areaNbr?: string;
  majoreZoneDescription?: string;
  subZoneDescription?: string;
  areaDescription?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–æ–Ω—ã
const createFullZoneNumber = (zone: Zone): string[] => {
  const results: string[] = [];

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–æ–Ω—É
  const majorZone = zone.majoreZoneNbr.toString().padStart(3, '0');
  results.push(majorZone);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–æ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
  if (zone.subZoneNbr) {
    const subZone = zone.subZoneNbr.toString().padStart(3, '0');
    results.push(subZone);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É –æ–±–ª–∞—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (zone.areaNbr) {
    const areaZone = zone.areaNbr.toString().padStart(3, '0');
    results.push(areaZone);
  }

  return results;
};

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
interface IMaterial {
  partNumberID: string;
  quantity: number;
  taskId: string;
  companyID: string;
  createUserID: string;
}

const AdminTaskPanel: React.FC<AdminPanelProps> = ({ values, isLoadingF }) => {
  const { t } = useTranslation();
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [editingvendor, setEditingvendor] = useState<ITask | null>(null);
  const [selectedItems, setSelectedItems] = useState<React.Key[] | []>([]);
  const [selectedAcType, setSelectedAcType] = useState<string>('');
  const [selectedTaskType, setSelectedTaskType] = useState<string>('');
  const [isTreeView, setIsTreeView] = useState(false);

  const [selectedTaskId, setSelectedTaskId] = useState<string>('');

  // –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  const { data: zones, isLoading: zonesLoading } = useGetFilteredZonesQuery(
    { acTypeId: selectedAcType },
    { skip: !selectedAcType }
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ zonesMap —Å –ª—É—á—à–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const zonesMap = useMemo(() => {
    console.group('üó∫Ô∏è Creating zones map');

    if (!zones?.length) {
      console.log('‚ö†Ô∏è No zones data available');
      console.groupEnd();
      return {};
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –∑–æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (3 —Ü–∏—Ñ—Ä—ã)
    const map = zones.reduce((acc: { [key: string]: string }, zone) => {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∑–æ–Ω–∞
      const majorZone = String(zone.majoreZoneNbr).padStart(3, '0');
      acc[majorZone] = zone._id;

      // –ü–æ–¥–∑–æ–Ω–∞
      if (zone.subZoneNbr) {
        const subZone = String(zone.subZoneNbr).padStart(3, '0');
        acc[subZone] = zone._id;
      }

      // –ó–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
      if (zone.areaNbr) {
        const areaZone = String(zone.areaNbr).padStart(3, '0');
        acc[areaZone] = zone._id;
      }

      return acc;
    }, {});

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º  –ª–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–æ–Ω
    const availableZones = Object.keys(map).sort(
      (a, b) => Number(a) - Number(b)
    );
    console.log('üìä Available zone numbers:', availableZones);
    console.groupEnd();

    return map;
  }, [zones]);

  const {
    data: tasksQuery,
    refetch: refetchTasks,
    isLoading,
    isFetching: isFetchungQuery,
  } = useGetTasksQuery(
    {
      acTypeID: values?.acTypeId,
      time: values?.time,
      amtoss: values?.AMM,
      taskNumber: values?.taskNumber,
      cardNumber: values?.cardNumber?.toString(),
      mpdDocumentationId: values?.mpdDocumentationId,
      taskType: values?.taskType?.toString(),
      isCriticalTask: values?.isCriticalTask,
    },
    { skip: !values }
  );

  const [addTask] = useAddTaskMutation();
  const [updateTask] = useUpdateTaskMutation();
  const [deleteTask] = useDeleteTaskMutation();
  const [addMultiPartTasks] = useAddMultiPartTasksMutation();
  const [addMultiTask] = useAddMultiTaskItemsMutation();
  const handleCreate = () => {
    setEditingvendor(null);
  };
  const handleEdit = (vendor: ITask) => {
    setEditingvendor(vendor);
  };

  const handleDelete = async (items: React.Key[]) => {
    Modal.confirm({
      title: t('ARE YOU SURE, YOU WANT TO DELETE THIS TASK?'),
      onOk: async () => {
        try {
          await deleteTask(items.toString()).unwrap();
          notification.success({
            message: t('SUCCESS'),
            description: t('TASK SUCCESSFULLY DELETED'),
          });
          setEditingvendor(null);
        } catch (error) {
          notification.error({
            message: t('ERROR'),
            description: t('ERROR DELETING TASK'),
          });
        }
      },
    });
  };
  const valueEnumTask: ValueEnumTypeTask = {
    RC: t('TC'),
    CR_TASK: t('CR TASK (CRITICAL TASK/DI)'),
    NRC: t('NRC (DEFECT)'),
    NRC_ADD: t('ADHOC (ADHOC TASK)'),
    MJC: t('MJC'),
    CMJC: t('CMJC'),
    FC: t('FC'),
    SMC: t('SMC'),
    SB: t('SB'),
    HARD_ACCESS: t('HARD_ACCESS'),
  };
  const valueEnumTaskType: any = {
    // RC: t('TC'),
    // CR_TASK: t('CR TASK (CRITICAL TASK/DI)'),
    // NRC: t('NRC (DEFECT)'),
    // NRC_ADD: t('ADHOC (ADHOC TASK)'),
    // MJC: t('MJC'),
    // CMJC: t('CMJC'),
    // FC: t('FC'),
    SMC: t('SMC'),
    // SB: t('SB'),
    HARD_ACCESS: t('HARD_ACCESS'),
  };
  const handleSubmit = async (task: ITask) => {
    try {
      if (editingvendor) {
        await updateTask(task).unwrap();
        notification.success({
          message: t('SUCCESS'),
          description: t('TASK SUCCESSFULLY UPDATED'),
        });
      } else {
        await addTask({ task }).unwrap();
        notification.success({
          message: t('SUCCESS'),
          description: t('TASK SUCCESSFULLY ADDED'),
        });
      }
    } catch (error) {
      notification.error({
        message: t('ERROR'),
        description: t('ERROR SAVING TASK'),
      });
    }
  };

  const columnDefs: any[] = [
    {
      field: 'cardNumber',
      headerName: `${t('CARD No')}`,
      filter: true,
      width: 100,
    },
    {
      field: 'taskNumber',
      headerName: `${t('TASK No')}`,
      filter: true,
    },
    {
      field: 'taskType',
      headerName: `${t('TASK TYPE')}`,
      filter: true,
      valueGetter: (params: { data: { taskType: keyof ValueEnumTypeTask } }) =>
        params.data.taskType,
      valueFormatter: (params: { value: keyof ValueEnumTypeTask }) => {
        const status = params.value;
        return valueEnumTask[status] || '';
      },
      cellStyle: (params: { value: keyof ValueEnumTypeTask }) => ({
        backgroundColor: getTaskTypeColor(params.value),
      }),
    },
    { field: 'description', headerName: `${t('DESCRIPTION')}`, filter: true },
    {
      field: 'rev',
      headerName: `${t('REVISION')}`,
      filter: true,
    },
    { field: 'MPD', headerName: `${t('MPD')}`, filter: true },
    { field: 'amtoss', headerName: `${t('REFERENCE')}`, filter: true },
    { field: 'ZONE', headerName: `${t('ZONE')}`, filter: true },
    { field: 'ACCESS', headerName: `${t('ACCESS')}`, filter: true },
    { field: 'ACCESS_NOTE', headerName: `${t('ACCESS_NOTE')}`, filter: true },
    { field: 'SKILL_CODE1', headerName: `${t('SKILL_CODE')}`, filter: true },
    { field: 'TASK_CODE', headerName: `${t('TASK_CODE')}`, filter: true },
    {
      field: 'SUB TASK_CODE',
      headerName: `${t('SUB TASK_CODE')}`,
      filter: true,
    },
    { field: 'PHASES', headerName: `${t('PHASES')}`, filter: true },
    {
      field: 'RESTRICTION_1',
      headerName: `${t('RESTRICTION_1')}`,
      filter: true,
    },
    {
      field: 'PREPARATION_CODE',
      headerName: `${t('PREPARATION_CODE')}`,
      filter: true,
    },
    {
      field: 'REFERENCE_2',
      headerName: `${t('REFERENCE_2')}`,
      filter: true,
    },
    {
      field: 'mainWorkTime',
      headerName: `${t('MHS')}`,
      filter: true,
    },
    {
      field: 'createDate',
      headerName: `${t('CREATE DATE')}`,
      filter: true,
      valueFormatter: (params: any) => {
        if (!params.value) return '';
        const date = new Date(params.value);
        return date.toLocaleDateString('ru-RU', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
        });
      },
    },
  ];
  const { data: acTypes } = useGetACTypesQuery({});

  const { data: mpdCodes } = useGetMPDCodesQuery({ acTypeID: selectedAcType });
  const { data: taskCodes } = useGetGroupTaskCodesQuery(
    { acTypeID: selectedAcType },
    { skip: !selectedAcType }
  );

  const taskCodeMap = useMemo(() => {
    if (!taskCodes) return {};
    return taskCodes.reduce((acc: { [key: string]: string }, code) => {
      acc[code.code] = code.id;
      return acc;
    }, {});
  }, [taskCodes]);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö
  const { data: skills } = useGetSkillsQuery({});

  // –°–æ–∑–¥–∞ —Ç–∞–±–ª–∏—Ü—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const skillCodesTable = useMemo(() => {
    if (!skills) return [];

    return skills.map((skill) => [
      skill.code,
      skill.name || skill.description || skill.code,
    ]);
  }, [skills]);

  const additionalSelects: AdditionalSelect[] = [
    {
      key: 'acTypeId',
      label: 'SELECT_AC_TYPE',
      options: (acTypes || []).map((acType) => ({
        value: acType.id,
        label: acType.name,
      })),
      required: true,
      width: 400,
    },
    {
      key: 'mpdDocumentationId',
      label: 'SELECT_MPD_CODES',
      options: (mpdCodes || []).map((mpdCode) => ({
        value: mpdCode.id,
        label: mpdCode.code,
      })),
      mode: 'multiple',
      dependsOn: 'acTypeId',
      width: 400,
    },
  ];

  const [selectedMpdCodes, setSelectedMpdCodes] = useState<string[]>([]);

  const onSelectChange = (key: string, value: any) => {
    if (key === 'acTypeId') {
      setSelectedAcType(value);
      setSelectedMpdCodes([]);
    } else if (key === 'mpdDocumentationId') {
      setSelectedMpdCodes(value);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞
  const validateZone = (zoneCode: string): boolean => {
    console.group(`üîç Validating zone: ${zoneCode}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (3 —Ü–∏—Ñ—Ä—ã)
    const formattedCode = String(zoneCode).padStart(3, '0');
    const isValidFormat = /^\d{3}$/.test(formattedCode);

    if (!isValidFormat) {
      console.log('‚ùå Invalid zone format');
      console.groupEnd();
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ zonesMap
    const exists = !!zonesMap[formattedCode];
    console.log(`${exists ? '‚úÖ' : '‚ùå'} Zone exists: ${exists}`);
    console.groupEnd();

    return exists;
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–æ–Ω
  const parseZones = (zoneString: string): string[] => {
    if (!zoneString) return [];

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–¥—ã
    return zoneString
      .replace(/\s+/g, ',')
      .replace(/\n/g, ',')
      .replace(/\+/g, ',')
      .split(',')
      .map((code) => String(code.trim()).padStart(3, '0'))
      .filter((code) => validateZone(code));
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω—Ü–∏—é –∞–ª–∏–¥–∞—Ü–∏–∏
  const validateData = (data: any[]): ValidationResult[] => {
    return data.map((row, index) => {
      const fieldErrors: ValidationResult['fieldErrors'] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
      Object.entries(row).forEach(([fieldName, value]) => {
        const errors = validateField(fieldName, value, row);
        if (errors.length > 0) {
          fieldErrors.push(...errors);
        }
      });

      return {
        row: index + 2,
        status: fieldErrors.length === 0 ? 'success' : 'error',
        fieldErrors,
      };
    });
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const renderValidationResults = (results: ValidationResult[]) => {
    return (
      <Table
        dataSource={results}
        columns={[
          {
            title: t('ROW'),
            dataIndex: 'row',
            width: 80,
          },
          {
            title: t('STATUS'),
            dataIndex: 'status',
            width: 100,
            render: (status) => (
              <Tag color={status === 'success' ? 'green' : 'red'}>
                {status.toUpperCase()}
              </Tag>
            ),
          },
          {
            title: t('ERRORS'),
            dataIndex: 'fieldErrors',
            render: (fieldErrors) => (
              <ul className="list-none m-0 p-0">
                {fieldErrors.map((error, index) => (
                  <li key={index} className="mb-2 text-red-500">
                    <div className="font-medium">
                      {t(`FIELD.${error.fieldName}`)}: {error.value}
                    </div>
                    <div className="text-sm">
                      {t(error.message, { value: error.value })}
                    </div>
                  </li>
                ))}
              </ul>
            ),
          },
        ]}
        pagination={false}
        size="small"
        className="validation-results-table"
      />
    );
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
  const validateField = (
    fieldName: string,
    value: any,
    row: any
  ): { fieldName: string; value: string; message: string }[] => {
    const errors: { fieldName: string; value: string; message: string }[] = [];

    switch (fieldName) {
      case 'code':
        if (!taskCodeMap[value]) {
          errors.push({
            fieldName,
            value: String(value),
            message: 'VALIDATION.FIELD_INVALID_WITH_DETAILS',
          });
        }
        break;

      case 'ZONE':
        if (value) {
          const zoneCodes = parseZones(String(value));
          const invalidZones = zoneCodes.filter((code) => !zonesMap[code]);
          if (invalidZones.length > 0) {
            errors.push({
              fieldName,
              value: invalidZones.join(', '),
              message: 'VALIDATION.FIELD_INVALID_WITH_DETAILS',
            });
          }
        }
        break;

      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    return errors;
  };

  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const getTaskFieldsConfig = (currentSkills: any[]) => ({
    title: 'TASK_FIELDS',
    type: 'table',
    headers: ['Field', 'Required', 'Example'],
    content: {
      SMC: [
        ['taskNumber', '‚úì', 'SMC-001'],
        ['taskDescription', '‚úì', 'Inspect landing gear'],
        ['code', '‚úì', 'SMC-LG'],
        ['mainWorkTime', '‚úì', '2.5'],
        ['skillCodeID', '‚úì', currentSkills?.[0]?.code || 'SKILL1, SKILL2'],
        ['IDENTIFICATOR', '‚úì', 'ROUTINE'],
        ['INTERVAL', '‚úì', '3000 FC'],
        ['INTERVAL_REPEAT', '‚úì', '3000 FC'],
        ['JOB_ZONE', '‚úì', 'FUS'],
        ['MPD', '‚úì', '25-170-00'],
      ],
      HARD_ACCESS: [
        ['taskNumber', '‚úì', 'HA-001'],
        ['taskDescription', '‚úì', 'Remove panel 125'],
        ['code', '‚úì', 'HA-HYD'],
        ['mainWorkTime', '‚úì', '2.5'],
        ['skillCodeID', '‚úì', currentSkills?.[0]?.code || 'SKILL1'],
        ['OPEN_MHR', '‚úì', '1.0'],
        ['CLOSE_MHR', '‚úì', '1.0'],
      ],
      PART_PRODUCE: [
        ['taskNumber', '‚úì', 'PP-001'],
        ['taskDescription', '‚úì', 'Produce bracket assembly'],
        ['code', '‚úì', 'PP-BA'],
        ['mainWorkTime', '‚úì', '4.0'],
        ['skillCodeID', '‚úì', currentSkills?.[0]?.code || 'SKILL1'],
        ['title', '‚úì', 'Bracket Assembly'],
        ['amtoss', '‚úì', 'DWG-123-456'],
      ],
    },
  });

  const getSkillCodesConfig = (currentSkillCodesTable: any[]) => ({
    title: 'SKILL_CODES',
    type: 'table',
    headers: ['Code', 'Description'],
    content: currentSkillCodesTable,
  });

  const getTaskCodesConfig = () => {
    const availableCodes =
      taskCodes?.map((code) => [
        code.code,
        code.description || code.code,
        `${code.code}-001`,
      ]) || [];

    return {
      title: 'TASK_CODES',
      type: 'table',
      headers: ['Code', 'Description', 'Example'],
      content: availableCodes,
    };
  };

  const getZonesConfig = () => {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const groupedZones = zones?.reduce((acc: any[], zone) => {
      const existingZone = acc.find(
        (z) =>
          z.majoreZoneNbr === zone.majoreZoneNbr &&
          z.subZoneNbr === zone.subZoneNbr
      );

      if (existingZone) {
        // –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∑–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ area –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        existingZone.areas = existingZone.areas || [];
        if (zone.areaNbr) {
          existingZone.areas.push({
            areaNbr: zone.areaNbr,
            areaDescription: zone.areaDescription,
          });
        }
      } else {
        // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∑–æ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        acc.push({
          majoreZoneNbr: zone.majoreZoneNbr,
          subZoneNbr: zone.subZoneNbr,
          subZoneDescription: zone.subZoneDescription,
          areas: zone.areaNbr
            ? [
                {
                  areaNbr: zone.areaNbr,
                  areaDescription: zone.areaDescription,
                },
              ]
            : [],
          description: zone.majoreZoneDescription,
        });
      }
      return acc;
    }, []);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ majoreZoneNbr –∏ subZoneNbr
    const sortedZones = groupedZones?.sort((a, b) => {
      const majorCompare = Number(a.majoreZoneNbr) - Number(b.majoreZoneNbr);
      if (majorCompare !== 0) return majorCompare;
      return Number(a.subZoneNbr || 0) - Number(b.subZoneNbr || 0);
    });

    const formattedContent = sortedZones?.map((zone) => [
      zone.majoreZoneNbr,
      zone.subZoneNbr ? `${zone.subZoneNbr} - ${zone.subZoneDescription}` : '',
      zone.areas.map((a: any) => a.areaNbr).join(', ') || '-',
      zone.areas.map((a: any) => a.areaDescription).join(', ') || '-',
      zone.description,
    ]);

    return {
      type: 'table',
      headers: [
        t('ZONE_CODE'),
        t('SUB_ZONES'),
        t('AREA_CODE'),
        t('AREA_DESCRIPTION'),
        t('DESCRIPTION'),
      ],
      content: formattedContent,
      tableProps: {
        scroll: { y: 'calc(100vh - 380px)' },
        pagination: { pageSize: 15 },
        className: 'zones-table',
        size: 'small',
        columns: [
          {
            title: t('ZONE_CODE'),
            dataIndex: '0',
            width: 60,
            fixed: 'left',
            className: 'column-zone-code',
          },
          {
            title: t('SUB_ZONES'),
            dataIndex: '1',
            width: 120,
            className: 'column-sub-zones',
          },
          {
            title: t('AREA_CODE'),
            dataIndex: '2',
            width: 80,
            className: 'column-area-code',
          },
          {
            title: t('AREA_DESCRIPTION'),
            dataIndex: '3',
            width: 180,
            className: 'column-area-description',
          },
          {
            title: t('DESCRIPTION'),
            dataIndex: '4',
            width: 180,
            className: 'column-description',
          },
        ],
        style: {
          '.zones-table': {
            width: '620px', // –°—É–º–º–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
            tableLayout: 'fixed',
            wordBreak: 'break-word',
            whiteSpace: 'normal',
          },
          '.zones-table .ant-table-thead > tr > th': {
            padding: '8px 4px',
            whiteSpace: 'normal',
            height: 'auto',
            backgroundColor: '#fafafa',
            fontWeight: 'bold',
          },
          '.zones-table .ant-table-tbody > tr > td': {
            padding: '4px',
            whiteSpace: 'normal',
            height: 'auto',
            verticalAlign: 'top',
            lineHeight: '1.2',
          },
          '.column-zone-code': {
            width: '60px !important',
          },
          '.column-sub-zones': {
            width: '120px !important',
          },
          '.column-area-code': {
            width: '80px !important',
          },
          '.column-area-description': {
            width: '180px !important',
          },
          '.column-description': {
            width: '180px !important',
          },
          '.ant-table-cell': {
            wordBreak: 'break-word !important',
            whiteSpace: 'normal !important',
            overflow: 'hidden !important',
            textOverflow: 'ellipsis !important',
          },
        },
      },
    };
  };

  const getTaskTypeInstructions = (taskType: string) => {
    const taskFieldsConfig = getTaskFieldsConfig(skills || []);
    const skillCodesConfig = getSkillCodesConfig(skillCodesTable);
    const intervalsConfig = getIntervalsConfig();
    const textInstructions = getTextInstructionsConfig(taskType);
    const taskCodesConfig = getTaskCodesConfig();
    const zonesConfig = getZonesConfig();

    return {
      tabs: [
        {
          key: 'instructions',
          label: t('INSTRUCTIONS'),
          content: textInstructions,
        },
        {
          key: 'fields',
          label: t('REQUIRED_FIELDS'),
          content: {
            type: 'table',
            ...taskFieldsConfig,
            content:
              taskFieldsConfig.content[
                taskType as keyof typeof taskFieldsConfig.content
              ],
          },
        },
        {
          key: 'task_codes',
          label: t('TASK_CODES'),
          content: taskCodesConfig,
        },
        {
          key: 'skills',
          label: t('AVAILABLE_SKILLS'),
          content: skillCodesConfig,
        },
        {
          key: 'zones',
          label: t('AVAILABLE_ZONES'),
          // content: zonesConfig,
          content: <></>,
        },
        ...(taskType === 'SMC'
          ? [
              {
                key: 'intervals',
                label: t('INTERVAL_FORMATS'),
                content: intervalsConfig,
              },
            ]
          : []),
      ],
    };
  };

  const getTemplateConfig = (taskType: string) => ({
    fields: [
      // –ë–∞–∑–æ–≤—ã–µ –æ–ª—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é
      {
        name: 'taskNumber',
        displayName: t('TASK_NUMBER'),
        required: true,
        description: 'TASK_NUMBER_DESCRIPTION',
        example: 'TASK-001',
        width: 15,
      },
      {
        name: 'taskDescription',
        displayName: t('TASK_DESCRIPTION'),
        required: true,
        description: 'TASK_DESCRIPTION_HELP_TEXT',
        example: 'Replace the wheel assembly',
        width: 40,
      },
      {
        name: 'mainWorkTime',
        displayName: t('MHS '),
        required: true,
        description: 'MHS_DESCRIPTION',
        example: '10',
        width: 15,
        validation: (value: string) => {
          const pattern = /^\d+(\.\d{1,2})?$/;
          return pattern.test(value);
        },
      },
      {
        name: 'code',
        displayName: t('TASK_CODE '),
        required: true,
        description: 'TASK_CODE_DESCRIPTION',
        example: 'GVI',
        width: 15,
        validation: (value: string) => {
          console.log('Validating code:', value);
          console.log('Available codes:', Object.keys(taskCodeMap));

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥ –≤ –º–∞–ø–µ
          const isValid = !!taskCodeMap[value];

          if (!isValid) {
            console.log(
              `Code ${value} not found in available codes:`,
              taskCodeMap
            );
          }

          return isValid;
        },
      },
      {
        name: 'title', // –î–æ–±–∞–≤–ª—è–µ–º title
        displayName: t('TASK_TITLE'),
        required: true,
        description: 'TASK_TITLE_DESCRIPTION',
        example: 'Wheel Assembly Replacement',
        width: 30,
        validation: (value: string) => {
          return value.length > 0;
        },
      },
      {
        name: 'amtoss', // –î–æ–±–∞–≤–ª—è–µ–º amtoss
        displayName: t('AMTOSS'),
        required: true,
        description: 'AMTOSS_DESCRIPTION',
        example: 'AMM 32-41-11',
        width: 20,
        validation: (value: string) => {
          return value.length > 0;
        },
      },
      {
        name: 'isCriticalTask',
        displayName: t('IS_CRITICAL_TASK'),
        required: true,
        description: t('IS_CRITICAL_TASK_DESCRIPTION'),
        example: 'true',
        width: 15,
        validation: (value: any) => {
          const strValue = String(value).toLowerCase();
          return strValue === 'true' || strValue === 'false';
        },
      },
      {
        name: 'skillCodeID',
        displayName: t('SKILL_CODES'),
        required: true,
        description: t('SKILL_CODES_DESCRIPTION'),
        example: 'AVI',
        width: 20,
      },
      // –î–æ–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è SMC
      ...(taskType === 'SMC'
        ? [
            {
              name: 'IDENTIFICATOR',
              displayName: t('IDENTIFICATOR'),
              required: true,
              description: 'IDENTIFICATOR_DESCRIPTION',
              example: 'ROUTINE',
              width: 15,
              validation: (value: string) =>
                ['ROUTINE', 'SPECIAL', 'CRITICAL'].includes(value),
            },
            {
              name: 'INTERVAL',
              displayName: t('INTERVAL '),
              required: true,
              description: 'INTERVAL_DESCRIPTION',
              example: '3000 FC, 1C, 8A',
              width: 15,
              // validation: validateInterval,
            },
            {
              name: 'INTERVAL_REPEAT',
              displayName: t('INTERVAL_REPEAT '),
              required: true,
              description: 'INTERVAL_REPEAT_DESCRIPTION',
              example: '3000 FC, 1C, 8A',
              width: 15,
              // validation: validateInterval,
            },
            {
              name: 'JOB_ZONE',
              displayName: t('JOB_ZONE'),
              required: true,
              description: 'JOB_ZONE_DESCRIPTION',
              example: 'FUS',
              width: 15,
            },
            {
              name: 'MPD',
              displayName: t('MPD '),
              required: true,
              description: 'MPD_DESCRIPTION',
              example: '25-170-00',
              width: 15,
              validation: (value: string) => {
                return value.length > 0;
              },
            },
            {
              name: 'zonesID',
              displayName: t('ZONE'),
              required: true,
              description: t('ZONE_DESCRIPTION'),
              example: '100,200+300\n400',
              width: 20,
              validation: (value: string) => {
                if (!value) return false;
                const codes = parseZones(value);
                return codes.every((code) => !!zonesMap[code]);
              },
            },
          ]
        : []),
      ...(taskType === 'HARD_ACCESS'
        ? [
            {
              name: 'OPEN_MHR',
              displayName: t('OPEN_MHR'),
              required: true,
              description: 'OPEN_MHR_DESCRIPTION',
              example: '1.0',
              width: 15,
            },
            {
              name: 'CLOSE_MHR',
              displayName: t('CLOSE_MHR'),
              required: true,
              description: 'CLOSE_MHR_DESCRIPTION',
              example: '1.0',
              width: 15,
            },
          ]
        : []),
    ],
    templateFileName: `tasks_template_${taskType.toLowerCase()}.xlsx`,
    additionalInstructions: getTaskTypeInstructions(taskType),
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ –Ω–∞–≤—ã–∫–æ–≤
  const { data: usersGroup } = useGetSkillsQuery({});

  // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –Ω–∞–≤—ã–∫–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const skillsMap = useMemo(() => {
    console.log('Creating skills map from:', usersGroup);
    if (!usersGroup) return {};

    const map = usersGroup.reduce(
      (acc: { [key: string]: string }, skill: any) => {
        // –ò—Å–ø–æ–ª—å—É–µ–º _id –≤–µ—Å—Ç–æ id
        acc[skill.code] = skill._id || skill.id;
        return acc;
      },
      {}
    );

    console.log('Available skill codes:', Object.keys(map));
    console.log('Skills map:', map);
    return map;
  }, [usersGroup]);

  // –û–±–Ω–æ–≤–ª—è–µ–º handleAddMultiItems
  const handleAddMultiItems = async (data: any) => {
    try {
      console.group('üîÑ Processing import data');
      console.log('üì• Initial data:', data);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
      console.group('üìä Available Zones');
      zones?.forEach((zone) => {
        console.log(`Zone ${zone.majoreZoneNbr}:`, {
          description: zone.majoreZoneDescription,
          subZone: zone.subZoneNbr,
          subZoneDesc: zone.subZoneDescription,
          area: zone.areaNbr,
          areaDesc: zone.areaDescription,
        });
      });
      console.groupEnd();

      const processedData = data.map((item: any) => {
        console.group(`Processing item with zonesID: ${item.zonesID}`);

        const {
          code,
          skillCodeID,
          zonesID: inputZonesID,
          isCriticalTask,
          ...restItem
        } = item;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–Ω
        let processedZonesID: string[] = [];
        let normalizedZones: string = '';

        if (inputZonesID !== undefined && inputZonesID !== null) {
          const zoneNumbers = parseZones(inputZonesID);
          console.log('üìä Parsed zone numbers:', zoneNumbers);

          normalizedZones = zoneNumbers.join(',');
          console.log('üìù Normalized zones string:', normalizedZones);

          processedZonesID = zoneNumbers
            .map((zoneNumber) => {
              console.log(
                `üîç Looking for zone ${zoneNumber} in map:`,
                zonesMap[zoneNumber]
              );
              const zoneId = zonesMap[zoneNumber];
              if (!zoneId) {
                console.warn(`‚ö†Ô∏è Zone ${zoneNumber} not found in map`);
              }
              return zoneId;
            })
            .filter((id): id is string => {
              const isValid = id !== null && id !== undefined;
              console.log(`‚úîÔ∏è Zone ID validation:`, { id, isValid });
              return isValid;
            });

          console.log('üéØ Final processed zone IDs:', processedZonesID);
        }

        const result = {
          ...restItem,
          code: taskCodeMap[code] || code,
          skillCodeID: Array.isArray(skillCodeID)
            ? skillCodeID
            : skillCodeID
            ? [skillsMap[skillCodeID]]
            : [],
          zonesID: processedZonesID,
          isCriticalTask: isCriticalTask?.toString().toLowerCase() === 'true',
          ZONE: normalizedZones,
        };

        console.log('üì§ Processed item:', result);
        console.groupEnd();
        return result;
      });

      console.log('‚úÖ Final processed data:', processedData);
      console.groupEnd();

      const response = await addMultiTask({
        parts: processedData,
      }).unwrap();

      notification.success({
        message: t('SUCCESS'),
        description: t('TASKS_IMPORTED_SUCCESSFULLY'),
      });
    } catch (error) {
      console.error('‚ùå Import error:', error);
      console.groupEnd();
      notification.error({
        message: t('ERROR'),
        description:
          error instanceof Error ? error.message : t('ERROR_IMPORTING_TASKS'),
      });
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ JOB_ZONE –≤ –∫–æ–¥—ã –∑–æ–Ω
  const getZoneCodesFromJobZone = (jobZone: string): string[] => {
    const zoneMap: { [key: string]: string[] } = {
      FUS: ['100', '200'],
      WING: ['500', '600'],
      TAIL: ['300'],
      LG: ['700'],
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–∏–º–æ—Å—Ç–∏
    };

    return zoneMap[jobZone] || [];
  };

  const transformedTasks = useMemo(() => {
    return transformToITask(tasksQuery || []);
  }, [tasksQuery]);
  const { data: partNumbers } = useGetPartNumbersQuery({});

  useEffect(() => {
    if (values) {
      console.log('Refetching with values:', values);
      refetchTasks();
    }
  }, [values, refetchTasks]);

  // –í useEffect –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω
  useEffect(() => {
    console.log('Zones loading status:', {
      selectedAcType,
      isZonesLoading: zonesLoading,
      hasZones: !!zones,
      zonesCount: zones?.length || 0,
    });
  }, [selectedAcType, zones, zonesLoading]);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  const getTextInstructionsConfig = (taskType: string) => ({
    type: 'text',
    content: {
      SMC: [
        '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞ (AC Type)',
        '2. –í—ã–±–µ—Ä–∏—Ç–µ MPD –∫–æ–¥—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞',
        '3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:',
        '   - taskNumber: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SMC-001)',
        '   - taskDescription: –ü–æ–¥—Ä–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
        '   - code: –ö–æ–¥ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
        '   - mainWorkTime: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö',
        '   - skillCodeID: –ö–æ–¥—ã —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
        '   - IDENTIFICATOR: ROUTINE/SPECIAL/CRITICAL',
        '   - INTERVAL: –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3000 FC)',
        '   - INTERVAL_REPEAT: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
        '   - JOB_ZONE: –ó–æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
        '   - MPD: –ö–æ–¥ MPD –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
        '   - ZONE: –ö–æ–¥—ã –∑–æ–Ω –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å:',
        '     - –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏',
        '     - —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞',
        '     - —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ –ø–ª—é—Å',
        '     –ü—Ä–∏–º–µ—Ä—ã:',
        '     133,191+415',
        '     416',
        '     510,520+550',
        '4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
        '5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ',
        '6. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å',
        '7. –ù–∞–∂–º–∏—Ç–µ Import –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
      ],
      HARD_ACCESS: [
        '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞ (AC Type)',
        '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:',
        '   - taskNumber: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, HA-001)',
        '   - taskDescription: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–æ—Å—Ç—É–ø–∞',
        '   - code: –ö–æ–¥ —Ç–∏–ø–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Å–ø–∏—Å–∫–∞',
        '   - mainWorkTime: –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö',
        '   - skillCodeID: –ö–æ–¥—ã —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π',
        '   - OPEN_MHR: –í—Ä–µ–º—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–∞',
        '   - CLOSE_MHR: –í—Ä–µ–º—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–∞',
        '   - ZONE: –ö–æ–¥—ã –∑–æ–Ω –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å:',
        '     - –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏',
        '     - —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞',
        '     - —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ –ø–ª—é—Å',
        '     –ü—Ä–∏–º–µ—Ä—ã:',
        '     133,191+415',
        '     416',
        '     510,520+550',
        '3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
        '4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ',
        '5. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å',
        '6. –ù–∞–∂–º–∏—Ç–µ Import –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
      ],
      PART_PRODUCE: [
        '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞ (AC Type)',
        '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:',
        '   - taskNumber: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PP-001)',
        '   - taskDescription: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        '   - code: –ö–æ–¥ —Ç–∏–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞',
        '   - mainWorkTime: –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ —á–∞—Å–∞—Ö',
        '   - skillCodeID: –ö–æ–¥—ã —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π',
        '   - title: –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
        '   - amtoss: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
        '3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
        '4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ',
        '5. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å',
        '6. –ù–∞–∂–º–∏—Ç–µ Import –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
      ],
    }[taskType],
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä—Ç–Ω–æ–º–µ—Ä–æ–≤
  const getPartsTableConfig = () => ({
    type: 'table',
    tableProps: {
      scroll: { y: 'calc(100vh - 380px)' },
      pagination: { pageSize: 15 },
      className: 'parts-table',
      size: 'small',
      columns: [
        {
          title: t('PART_NUMBER'),
          dataIndex: 'PART_NUMBER',
          width: 150,
          fixed: 'left',
          sorter: (a: any, b: any) =>
            a.PART_NUMBER.localeCompare(b.PART_NUMBER),
          filterSearch: true,
          onFilter: (value: string, record: any) =>
            record.PART_NUMBER.toLowerCase().includes(value.toLowerCase()),
        },
        {
          title: t('DESCRIPTION'),
          dataIndex: 'DESCRIPTION',
          width: 250,
          filterSearch: true,
          onFilter: (value: string, record: any) =>
            record.DESCRIPTION?.toLowerCase().includes(value.toLowerCase()),
        },
        {
          title: t('UNIT'),
          dataIndex: 'UNIT',
          width: 100,
          filters: [...new Set(partNumbers?.map((p) => p.UNIT))].map(
            (unit) => ({
              text: unit || '-',
              value: unit,
            })
          ),
          onFilter: (value: string, record: any) => record.UNIT === value,
        },
      ],
      style: {
        '.parts-table': {
          width: '100%',
          tableLayout: 'fixed',
          wordBreak: 'break-word',
          whiteSpace: 'normal',
        },
        '.parts-table .ant-table-thead > tr > th': {
          padding: '8px 4px',
          whiteSpace: 'normal',
          height: 'auto',
          backgroundColor: '#fafafa',
          fontWeight: 'bold',
        },
        '.parts-table .ant-table-tbody > tr > td': {
          padding: '4px',
          whiteSpace: 'normal',
          height: 'auto',
          verticalAlign: 'top',
          lineHeight: '1.2',
        },
      },
    },
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–æ–º–µ—Ä–∞
  const validatePartNumber = (partNumber: string) => {
    console.group(`üîç Validating Part Number: ${partNumber}`);

    // –ò—â–µ–º –ø–∞—Ä—Ç–Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    const foundPart = partNumbers?.find(
      (part) => part.PART_NUMBER === partNumber || part.id === partNumber
    );

    console.log(
      'Available parts:',
      partNumbers?.map((p) => ({
        id: p.id,
        partNumber: p.PART_NUMBER,
      }))
    );
    console.log('Found part:', foundPart);

    const isValid = !!foundPart;
    console.log(`Validation result: ${isValid ? '‚úÖ Valid' : '‚ùå Invalid'}`);

    console.groupEnd();
    return { isValid, foundPart };
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const validateMaterials = (data: any[]): ValidationResult[] => {
    console.group('üîç Starting Materials Validation');
    console.log('üìù Raw input data:', data);

    const results = data.map((row, index) => {
      console.group(`\nüìã Row ${index + 1} Validation`);
      console.log('Row data:', row);

      const fieldErrors: ValidationResult['fieldErrors'] = [];

      // –í–∞–ª–∏–¥–∞—Ü–∏—è partNumberID
      if (!row.partNumberID) {
        console.log('‚ùå partNumberID is missing');
        fieldErrors.push({
          fieldName: 'partNumberID',
          value: '',
          message: 'VALIDATION.PART_NUMBER_REQUIRED',
        });
      } else {
        const { isValid, foundPart } = validatePartNumber(row.partNumberID);
        if (!isValid) {
          console.log(`‚ùå Invalid partNumberID: ${row.partNumberID}`);
          console.log(
            'Available part numbers:',
            partNumbers?.map((p) => p.PART_NUMBER).join(', ')
          );
          fieldErrors.push({
            fieldName: 'partNumberID',
            value: row.partNumberID,
            message: `VALIDATION.INVALID_PART_NUMBER: ${row.partNumberID} not found in available parts`,
          });
        } else {
          console.log(`‚úÖ Valid partNumberID: ${row.partNumberID}`);
          console.log('Matched part:', foundPart);
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è quantity
      if (!row.quantity) {
        console.log('‚ùå quantity is missing');
        fieldErrors.push({
          fieldName: 'quantity',
          value: '',
          message: 'VALIDATION.QUANTITY_REQUIRED',
        });
      } else {
        const quantity = Number(row.quantity);
        console.group('üî¢ Quantity validation');
        console.log('Raw quantity:', row.quantity);
        console.log('Parsed quantity:', quantity);

        if (isNaN(quantity)) {
          console.log('‚ùå Not a number');
          fieldErrors.push({
            fieldName: 'quantity',
            value: row.quantity,
            message: 'VALIDATION.QUANTITY_NOT_NUMBER',
          });
        } else if (quantity <= 0) {
          console.log('‚ùå Not positive');
          fieldErrors.push({
            fieldName: 'quantity',
            value: row.quantity,
            message: 'VALIDATION.QUANTITY_MUST_BE_POSITIVE',
          });
        } else if (!Number.isInteger(quantity)) {
          console.log('‚ùå Not integer');
          fieldErrors.push({
            fieldName: 'quantity',
            value: row.quantity,
            message: 'VALIDATION.QUANTITY_MUST_BE_INTEGER',
          });
        } else {
          console.log('‚úÖ Valid quantity');
        }
        console.groupEnd();
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è taskId
      if (!row.taskId) {
        console.log('‚ùå taskId is missing');
        fieldErrors.push({
          fieldName: 'taskId',
          value: '',
          message: 'VALIDATION.TASK_ID_REQUIRED',
        });
      } else {
        console.group('üîç Task validation');
        console.log('Looking for task:', row.taskId);
        console.log(
          'Available tasks:',
          transformedTasks?.map((t) => ({
            id: t.id,
            number: t.taskNumber,
          }))
        );

        const taskExists = transformedTasks?.some(
          (task) => task.id === row.taskId || task.taskNumber === row.taskId
        );

        if (!taskExists) {
          console.log('‚ùå Task not found');
          fieldErrors.push({
            fieldName: 'taskId',
            value: row.taskId,
            message: `VALIDATION.INVALID_TASK_ID: ${row.taskId} not found`,
          });
        } else {
          console.log('‚úÖ Valid task');
        }
        console.groupEnd();
      }

      const rowStatus = fieldErrors.length === 0 ? 'success' : 'error';
      console.log(`\nüìä Row validation result: ${rowStatus}`);
      if (fieldErrors.length > 0) {
        console.log('Found errors:', fieldErrors);
      }

      console.groupEnd(); // Row validation group

      return {
        row: index + 2,
        status: rowStatus,
        fieldErrors,
      };
    });

    console.log('\nüèÅ Final validation results:', results);
    console.groupEnd(); // Materials validation group
    return results;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const handleAddMaterials = async (data: any[]) => {
    console.group('üì§ Processing Materials Upload');
    console.log('Input data:', data);

    try {
      const validationResults = validateMaterials(data);
      const hasErrors = validationResults.some(
        (result) => result.status === 'error'
      );

      if (hasErrors) {
        console.log('‚ùå Validation failed');
        console.log('Validation results:', validationResults);

        notification.error({
          message: t('VALIDATION_ERROR'),
          description: t('PLEASE_CHECK_VALIDATION_RESULTS'),
          duration: 0,
        });
        return;
      }

      console.log('‚úÖ Validation passed, preparing data for upload');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const parts = data.map((item) => {
        const { foundPart } = validatePartNumber(item.partNumberID);
        return {
          partNumberID: foundPart?._id,
          quantity: parseInt(item.quantity),
          taskId: item.taskId,
        };
      });

      console.log('Prepared parts for multi-upload:', parts);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      await addMultiPartTasks({ parts }).unwrap();

      notification.success({
        message: t('SUCCESS'),
        description: t('MATERIALS_IMPORTED_SUCCESSFULLY'),
      });
    } catch (error) {
      console.error('‚ùå Upload error:', error);
      notification.error({
        message: t('ERROR'),
        description: t('ERROR_IMPORTING_MATERIALS'),
      });
    }

    console.groupEnd();
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º translations
  const translations = {
    ru: {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
      PART_NUMBER: '–ù–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏',
      QUANTITY: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      UNIT: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
      DESCRIPTION: '–û–ø–∏—Å–∞–Ω–∏–µ',
      TASK: '–ó–∞–¥–∞—á–∞',
      CREATE_DATE: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      IMPORT_MATERIALS: '–ò–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      MATERIALS_IMPORTED_SUCCESSFULLY: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã',
      ERROR_IMPORTING_MATERIALS: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      CLICK_TO_VIEW_MATERIALS_TEMPLATE:
        '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      AVAILABLE_PARTS: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–∞–ª–∏',
      EXAMPLE: '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
      SUCCESS: '–£—Å–ø–µ—à–Ω–æ',
      ERROR: '–û—à–∏–±–∫–∞',
      VALIDATION_ERROR: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      PLEASE_CHECK_VALIDATION_RESULTS:
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏',

      // –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      VALIDATION: {
        PART_NUMBER_REQUIRED: '–ù–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        INVALID_PART_NUMBER: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏',
        QUANTITY_REQUIRED: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
        QUANTITY_NOT_NUMBER: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º',
        QUANTITY_MUST_BE_POSITIVE: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º',
        QUANTITY_MUST_BE_INTEGER: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
        TASK_ID_REQUIRED: 'ID –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        INVALID_TASK_ID: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏',
      },

      // –û–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª–µ–π
      FIELD: {
        PART_NUMBER_DESCRIPTION: '–ù–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
        QUANTITY_DESCRIPTION: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)',
        TASK_DESCRIPTION: '–ó–∞–¥–∞—á–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª',
      },

      // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      INSTRUCTIONS: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      AVAILABLE_PARTS: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–∞–ª–∏',
      EXAMPLE: '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
    },
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const getMaterialsTemplateConfig = () => ({
    fields: [
      {
        name: 'partNumberID',
        displayName: t('PART_NUMBER'),
        required: true,
        description: t('PART_NUMBER_DESCRIPTION'),
        example: partNumbers?.[0]?.PART_NUMBER || 'NAS1149F0332P',
        width: 20,
        validation: (value: string) => validatePartNumber(value).isValid,
      },
      {
        name: 'quantity',
        displayName: t('QUANTITY'),
        required: true,
        description: t('QUANTITY_DESCRIPTION'),
        example: '1',
        width: 10,
        validation: (value: string) => {
          const num = Number(value);
          return !isNaN(num) && num > 0 && Number.isInteger(num);
        },
      },
      {
        name: 'taskId',
        displayName: t('TASK'),
        required: true,
        description: t('TASK_DESCRIPTION'),
        example: transformedTasks?.[0]?.taskNumber || 'SMC-001',
        width: 20,
        validation: (value: string) =>
          transformedTasks?.some(
            (task) => task.id === value || task.taskNumber === value
          ),
      },
    ],
    templateFileName: 'materials_template.xlsx',
    additionalInstructions: {
      tabs: [
        {
          key: 'instructions',
          label: t('INSTRUCTIONS'),
          content: {
            type: 'text',
            content: [
              '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞ (AC Type)',
              '2. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É (Task)',
              '3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:',
              '   - Part Number: –ù–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
              '   - Quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)',
              '4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
              '5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ',
              '6. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å',
              '7. –ù–∞–∂–º–∏—Ç–µ Import –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
            ],
          },
        },
        {
          key: 'example',
          label: t('EXAMPLE'),
          content: {
            type: 'table',
            headers: ['Part Number', 'Quantity', 'Task'],
            content: [
              [
                partNumbers?.[0]?.PART_NUMBER || 'NAS1149F0332P',
                '2',
                transformedTasks?.[0]?.taskNumber || 'SMC-001',
              ],
              [
                partNumbers?.[1]?.PART_NUMBER || 'AN960-416L',
                '4',
                transformedTasks?.[1]?.taskNumber || 'SMC-002',
              ],
              [
                partNumbers?.[2]?.PART_NUMBER || 'MS21042L4',
                '2',
                transformedTasks?.[2]?.taskNumber || 'SMC-003',
              ],
            ],
          },
        },
      ],
    },
  });

  return (
    <>
      <Space className="gap-6 pb-3">
        <Col>
          <PermissionGuard requiredPermissions={[Permission.TASK_ACTIONS]}>
            <Button
              size="small"
              icon={<PlusSquareOutlined />}
              onClick={handleCreate}
            >
              {t('ADD TASK')}
            </Button>
          </PermissionGuard>
        </Col>
        <PermissionGuard requiredPermissions={[Permission.TASK_ACTIONS]}>
          <Space className="gap-6">
            <FileUploaderV2
              templateConfig={getTemplateConfig(selectedTaskType)}
              onFileProcessed={handleAddMultiItems}
              buttonText="IMPORT_TASKS"
              modalTitle="IMPORT_TASKS"
              tooltipText="CLICK_TO_VIEW_TASK_TEMPLATE"
              additionalSelects={[
                ...additionalSelects,
                {
                  key: 'taskType',
                  label: 'SELECT_TASK_TYPE',
                  options: Object.entries(valueEnumTaskType).map(
                    ([key, value]) => ({
                      value: key,
                      label: value,
                    })
                  ),
                  required: true,
                  width: 400,
                  onChange: (value: any) => setSelectedTaskType(value),
                },
              ]}
              onSelectChange={(key, value) => {
                if (key === 'acTypeId') {
                  setSelectedAcType(value);
                } else if (key === 'taskType') {
                  setSelectedTaskType(value);
                }
              }}
            />

            <FileUploaderV2
              templateConfig={getMaterialsTemplateConfig()}
              onFileProcessed={handleAddMaterials}
              buttonText="IMPORT_MATERIALS"
              modalTitle="IMPORT_MATERIALS"
              tooltipText="CLICK_TO_VIEW_MATERIALS_TEMPLATE"
              additionalSelects={[
                {
                  key: 'acTypeId',
                  label: 'SELECT_AC_TYPE',
                  options: (acTypes || []).map((acType) => ({
                    value: acType.id,
                    label: acType.name,
                  })),
                  required: true,
                  width: 400,
                },
                {
                  key: 'taskId',
                  label: 'SELECT_TASK',
                  options: (transformedTasks || []).map((task) => ({
                    value: task.id,
                    label: `${task.taskNumber} - ${task.description}`,
                  })),
                  required: true,
                  width: 400,
                  dependsOn: 'acTypeId',
                },
              ]}
            />
          </Space>
        </PermissionGuard>
        <Col style={{ textAlign: 'right' }}>
          {
            <PermissionGuard requiredPermissions={[Permission.TASK_ACTIONS]}>
              <Button
                disabled={!selectedItems?.length}
                size="small"
                icon={<MinusSquareOutlined />}
                onClick={() => handleDelete(selectedItems)}
              >
                {t('DELETE TASK')}
              </Button>
            </PermissionGuard>
          }
        </Col>
        <Col>
          <Switch
            checkedChildren="Table"
            unCheckedChildren="Tree"
            defaultChecked
            onChange={() => setIsTreeView(!isTreeView)}
          />
        </Col>
      </Space>

      <div className="flex flex-col md:flex-row justify-between w-full">
        <Split
          initialPrimarySize="35%"
          splitterSize="20px"
          className="w-full md:w-2/3"
        >
          <div
            className={`${styles.splitPanel} h-[72vh] bg-white px-4 rounded-md border-gray-400 p-3 overflow-auto`}
          >
            {isTreeView ? (
              <>
                {tasksQuery && tasksQuery.length ? (
                  <AdminTaskPanelTree
                    onTaskSelect={handleEdit}
                    tasks={tasksQuery || []}
                    isLoading={isFetchungQuery || isLoading}
                    onCheckItems={(items: any) => setSelectedItems(items)}
                  />
                ) : (
                  <Empty />
                )}
              </>
            ) : (
              <div className="overflow-x-auto">
                <UniversalAgGrid
                  gridId="taskList"
                  pagination={true}
                  isChekboxColumn={true}
                  columnDefs={columnDefs}
                  rowData={transformedTasks || []}
                  onRowSelect={(rowData: any | null) => handleEdit(rowData[0])}
                  height={'65vh'}
                  onCheckItems={(items: React.Key[]) => setSelectedItems(items)}
                  isLoading={isLoading || isFetchungQuery}
                  //className={styles.zonesTable}
                />
              </div>
            )}
          </div>
          <div
            className={`${styles.splitPanel} h-[70vh] bg-white px-4 rounded-md border-gray-400 p-3 overflow-y-auto`}
          >
            <AdminTaskPanelForm
              task={editingvendor || undefined}
              onSubmit={handleSubmit}
            />
          </div>
        </Split>
      </div>
    </>
  );
};
export default AdminTaskPanel;
