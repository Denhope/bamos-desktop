// //ts-nocheck
// import React, { useEffect, useMemo, useState } from 'react';
// import {
//   Button,
//   Row,
//   Col,
//   Modal,
//   message,
//   Space,
//   Spin,
//   Empty,
//   Switch,
//   notification,
// } from 'antd';
// import { PlusSquareOutlined, MinusSquareOutlined } from '@ant-design/icons';
// import { useTranslation } from 'react-i18next';
// import { TaskFilteredFormValues } from './AdminTaskFilterdForm';
// import { useTypedSelector } from '@/hooks/useTypedSelector';

// import AdminTaskPanelTree from './AdminTaskPanelTree';
// import AdminTaskPanelForm from './AdminTaskPanelForm';
// import { ITask, ITaskResponce } from '@/models/ITask';
// import { Split } from '@geoffcox/react-splitter';
// import FileUploader from '@/components/shared/FileUploader';
// import UniversalAgGrid from '@/components/shared/UniversalAgGrid';
// import {
//   getTaskTypeColor,
//   transformToITask,
//   ValueEnumTypeTask,
// } from '@/services/utilites';
// import { useGetPartNumbersQuery } from '@/features/partAdministration/partApi';
// import PermissionGuard, { Permission } from '@/components/auth/PermissionGuard';
// import { useGlobalState } from '@/components/woAdministration/GlobalStateContext';
// import {
//   useAddMultiTaskItemsMutation,
//   useAddTaskMutation,
//   useDeleteTaskMutation,
//   useGetTasksQuery,
//   useUpdateTaskMutation,
// } from '@/features/tasksAdministration/tasksApi';
// import FileUploaderV2 from '@/components/shared/FileUploaderV2';
// import { useGetACTypesQuery } from '@/features/acTypeAdministration/acTypeApi';
// import { useGetMPDCodesQuery } from '@/features/MPDAdministration/mpdCodesApi';
// import { useGetGroupTaskCodesQuery } from '@/features/tasksAdministration/taskCodesApi';
// import { useGetSkillsQuery } from '@/features/userAdministration/skillApi';
// import { useGetFilteredZonesQuery } from '@/features/zoneAdministration/zonesApi';
// import ZonesTab from './ZonesTab';

// interface AdminPanelProps {
//   values: TaskFilteredFormValues;
//   isLoadingF?: boolean;
// }

// // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
// interface ValidationResult {
//   row: number;
//   status: 'success' | 'error';
//   messages: string[];
//   fieldName?: string;
//   value?: string;
// }

// interface AdditionalSelect {
//   key: string;
//   label: string;
//   options: { value: string; label: string }[];
//   mode?: 'multiple' | undefined;
//   required?: boolean;
//   disabled?: boolean;
//   width?: number;
//   dependsOn?: string;
//   onChange?: (value: any) => void;
// }

// const getIntervalsConfig = () => ({
//   title: 'INTERVALS',
//   type: 'table',
//   headers: ['Code', 'Example'],
//   content: [
//     ['FC (Flight Cycles)', '3000 FC'],
//     ['FH (Flight Hours)', '5000 FH'],
//     ['MO (Months)', '12 MO'],
//     ['YR (Years)', '2 YR'],
//     ['WK (Weeks)', '6 WK'],
//     ['DY (Days)', '30 DY'],
//   ],
// });
// // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é parseZones —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// const parseZones = (zoneString: string): string[] => {
//   console.group('üîç parseZones');
//   console.log('üì• Input zone string:', zoneString);

//   if (!zoneString) {
//     console.log('‚ö†Ô∏è Empty zone string');
//     console.groupEnd();
//     return [];
//   }

//   // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É
//   const normalizedString = zoneString
//     .replace(/\s+/g, ',')
//     .replace(/\n/g, ',')
//     .replace(/\+/g, ',');

//   console.log('üîÑ Normalized string:', normalizedString);

//   // –†–∞–∑–±–∏–≤–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º
//   const result = normalizedString
//     .split(',')
//     .map((code) => code.trim())
//     .filter(Boolean);

//   console.log('üì§ Parsed zones:', result);
//   console.groupEnd();
//   return result;
// };

// // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
// const getTextInstructionsConfig = (taskType: string) => ({
//   title: 'INSTRUCTIONS',
//   type: 'text',
//   content: {
//     SMC: [
//       '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞ (AC Type)',
//       '2. –í—ã–±–µ—Ä–∏—Ç–µ MPD –∫–æ–¥—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞',
//       '3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:',
//       '   - taskNumber: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SMC-001)',
//       '   - taskDescription: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
//       '   - code: –ö–æ–¥ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
//       '   - mainWorkTime: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö',
//       '   - skillCodeID: –ö–æ–¥—ã —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
//       '   - IDENTIFICATOR: ROUTINE/SPECIAL/CRITICAL',
//       '   - INTERVAL: –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3000 FC)',
//       '   - INTERVAL_REPEAT: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
//       '   - JOB_ZONE: –ó–æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
//       '   - MPD: –ö–æ–¥ MPD –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
//       '   - ZONE: –ö–æ–¥—ã –∑–æ–Ω –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å:',
//       '     - –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏',
//       '     - —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞',
//       '     - —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ –ø–ª—é—Å',
//       '     –ü—Ä–∏–º–µ—Ä—ã:',
//       '     133,191+415',
//       '     416',
//       '     510,520+550',
//       '4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
//       '5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ',
//       '6. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å',
//       '7. –ù–∞–∂–º–∏—Ç–µ Import –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
//     ],
//     HARD_ACCESS: [
//       '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞ (AC Type)',
//       '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:',
//       '   - taskNumber: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, HA-001)',
//       '   - taskDescription: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–æ—Å—Ç—É–ø–∞',
//       '   - code: –ö–æ–¥ —Ç–∏–ø–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Å–ø–∏—Å–∫–∞',
//       '   - mainWorkTime: –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö',
//       '   - skillCodeID: –ö–æ–¥—ã —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π',
//       '   - OPEN_MHR: –í—Ä–µ–º—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–∞',
//       '   - CLOSE_MHR: –í—Ä–º—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–∞',
//       '   - ZONE: –ö–æ–¥—ã –∑–æ–Ω –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å:',
//       '     - –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏',
//       '     - —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞',
//       '     - —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ –ø–ª—é—Å',
//       '     –ü—Ä–∏–º–µ—Ä—ã:',
//       '     133,191+415',
//       '     416',
//       '     510,520+550',
//       '3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
//       '4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ',
//       '5. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å',
//       '6. –ù–∞–∂–º–∏—Ç–µ Import –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
//     ],
//     PART_PRODUCE: [
//       '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞ (AC Type)',
//       '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:',
//       '   - taskNumber: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PP-001)',
//       '   - taskDescription: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
//       '   - code: –ö–æ–¥ —Ç–∏–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞',
//       '   - mainWorkTime: –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ —á–∞—Å–∞—Ö',
//       '   - skillCodeID: –ö–æ–¥—ã —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π',
//       '   - title: –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
//       '   - amtoss: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
//       '3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
//       '4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ',
//       '5. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å',
//       '6. –ù–∞–∂–º–∏—Ç–µ Import –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
//     ],
//   }[taskType],
// });

// const AdminTaskPanel: React.FC<AdminPanelProps> = ({ values, isLoadingF }) => {
//   const [editingvendor, setEditingvendor] = useState<ITask | null>(null);
//   const [selectedItems, setSelectedItems] = useState<React.Key[] | []>([]);
//   const [selectedAcType, setSelectedAcType] = useState<string>('');

//   const {
//     data: tasksQuery,
//     refetch: refetchTasks,
//     isLoading,
//     isFetching: isFetchungQuery,
//   } = useGetTasksQuery(
//     {
//       acTypeID: values?.acTypeId,
//       time: values?.time,
//       amtoss: values?.AMM,
//       taskNumber: values?.taskNumber,
//       cardNumber: values?.cardNumber?.toString(),
//       mpdDocumentationId: values?.mpdDocumentationId,
//       taskType: values?.taskType?.toString(),
//       isCriticalTask: values?.isCriticalTask,
//     },
//     { skip: !values }
//   );

//   // –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –í–°
//   const { data: zones, isLoading: zonesLoading } = useGetFilteredZonesQuery(
//     { acTypeId: selectedAcType },
//     { skip: !selectedAcType }
//   );

//   // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∑–æ–Ω
//   const zonesMap = useMemo(() => {
//     console.group('üó∫Ô∏è Creating zones map');
//     console.log('üì• Received zones data:', zones);

//     if (!zones) {
//       console.log('‚ö†Ô∏è No zones data available');
//       console.groupEnd();
//       return {};
//     }

//     // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –∑–æ–Ω
//     const structuredMap = zones.reduce((acc: any, zone) => {
//       // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
//       if (!acc[zone.majoreZoneNbr]) {
//         acc[zone.majoreZoneNbr] = {};
//       }
//       if (!acc[zone.majoreZoneNbr][zone.subZoneNbr]) {
//         acc[zone.majoreZoneNbr][zone.subZoneNbr] = {};
//       }

//       // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É —Å areaNbr
//       acc[zone.majoreZoneNbr][zone.subZoneNbr][zone.areaNbr || 0] = zone._id;

//       return acc;
//     }, {});

//     console.log('üìä Created structured zones map:', structuredMap);
//     console.groupEnd();
//     return structuredMap;
//   }, [zones]);

//   const [addTask] = useAddTaskMutation();
//   const [updateTask] = useUpdateTaskMutation();
//   const [deleteTask] = useDeleteTaskMutation();
//   const [addMultiTask] = useAddMultiTaskItemsMutation();
//   const [isTreeView, setIsTreeView] = useState(false);
//   const handleCreate = () => {
//     setEditingvendor(null);
//   };
//   const { t } = useTranslation();
//   const handleEdit = (vendor: ITask) => {
//     setEditingvendor(vendor);
//   };

//   const handleDelete = async (items: React.Key[]) => {
//     Modal.confirm({
//       title: t('ARE YOU SURE, YOU WANT TO DELETE THIS TASK?'),
//       onOk: async () => {
//         try {
//           await deleteTask(items.toString()).unwrap();
//           notification.success({
//             message: t('SUCCESS'),
//             description: t('TASK SUCCESSFULLY DELETED'),
//           });
//           setEditingvendor(null);
//         } catch (error) {
//           notification.error({
//             message: t('ERROR'),
//             description: t('ERROR DELETING TASK'),
//           });
//         }
//       },
//     });
//   };
//   const valueEnumTask: ValueEnumTypeTask = {
//     RC: t('TC'),
//     CR_TASK: t('CR TASK (CRITICAL TASK/DI)'),
//     NRC: t('NRC (DEFECT)'),
//     NRC_ADD: t('ADHOC (ADHOC TASK)'),
//     MJC: t('MJC'),
//     CMJC: t('CMJC'),
//     FC: t('FC'),
//     SMC: t('SMC'),
//     SB: t('SB'),
//     HARD_ACCESS: t('HARD_ACCESS'),
//   };
//   const valueEnumTaskType: any = {
//     // RC: t('TC'),
//     // CR_TASK: t('CR TASK (CRITICAL TASK/DI)'),
//     // NRC: t('NRC (DEFECT)'),
//     // NRC_ADD: t('ADHOC (ADHOC TASK)'),
//     // MJC: t('MJC'),
//     // CMJC: t('CMJC'),
//     // FC: t('FC'),
//     SMC: t('SMC'),
//     // SB: t('SB'),
//     HARD_ACCESS: t('HARD_ACCESS'),
//   };
//   const handleSubmit = async (task: ITask) => {
//     try {
//       if (editingvendor) {
//         await updateTask(task).unwrap();
//         notification.success({
//           message: t('SUCCESS'),
//           description: t('TASK SUCCESSFULLY UPDATED'),
//         });
//       } else {
//         await addTask({ task }).unwrap();
//         notification.success({
//           message: t('SUCCESS'),
//           description: t('TASK SUCCESSFULLY ADDED'),
//         });
//       }
//     } catch (error) {
//       notification.error({
//         message: t('ERROR'),
//         description: t('ERROR SAVING TASK'),
//       });
//     }
//   };

//   const columnDefs: any[] = [
//     {
//       field: 'cardNumber',
//       headerName: `${t('CARD No')}`,
//       filter: true,
//       width: 100,
//     },
//     {
//       field: 'taskNumber',
//       headerName: `${t('TASK No')}`,
//       filter: true,
//     },
//     {
//       field: 'taskType',
//       headerName: `${t('TASK TYPE')}`,
//       filter: true,
//       valueGetter: (params: { data: { taskType: keyof ValueEnumTypeTask } }) =>
//         params.data.taskType,
//       valueFormatter: (params: { value: keyof ValueEnumTypeTask }) => {
//         const status = params.value;
//         return valueEnumTask[status] || '';
//       },
//       cellStyle: (params: { value: keyof ValueEnumTypeTask }) => ({
//         backgroundColor: getTaskTypeColor(params.value),
//       }),
//     },
//     { field: 'description', headerName: `${t('DESCRIPTION')}`, filter: true },
//     {
//       field: 'rev',
//       headerName: `${t('REVISION')}`,
//       filter: true,
//     },
//     { field: 'MPD', headerName: `${t('MPD')}`, filter: true },
//     { field: 'amtoss', headerName: `${t('REFERENCE')}`, filter: true },
//     { field: 'ZONE', headerName: `${t('ZONE')}`, filter: true },
//     { field: 'ACCESS', headerName: `${t('ACCESS')}`, filter: true },
//     { field: 'ACCESS_NOTE', headerName: `${t('ACCESS_NOTE')}`, filter: true },
//     { field: 'SKILL_CODE1', headerName: `${t('SKILL_CODE')}`, filter: true },
//     { field: 'TASK_CODE', headerName: `${t('TASK_CODE')}`, filter: true },
//     {
//       field: 'SUB TASK_CODE',
//       headerName: `${t('SUB TASK_CODE')}`,
//       filter: true,
//     },
//     { field: 'PHASES', headerName: `${t('PHASES')}`, filter: true },
//     {
//       field: 'RESTRICTION_1',
//       headerName: `${t('RESTRICTION_1')}`,
//       filter: true,
//     },
//     {
//       field: 'PREPARATION_CODE',
//       headerName: `${t('PREPARATION_CODE')}`,
//       filter: true,
//     },
//     {
//       field: 'REFERENCE_2',
//       headerName: `${t('REFERENCE_2')}`,
//       filter: true,
//     },
//     {
//       field: 'mainWorkTime',
//       headerName: `${t('MHS')}`,
//       filter: true,
//     },
//     {
//       field: 'createDate',
//       headerName: `${t('CREATE DATE')}`,
//       filter: true,
//       valueFormatter: (params: any) => {
//         if (!params.value) return '';
//         const date = new Date(params.value);
//         return date.toLocaleDateString('ru-RU', {
//           year: 'numeric',
//           month: '2-digit',
//           day: '2-digit',
//         });
//       },
//     },
//   ];
//   const { data: acTypes } = useGetACTypesQuery({});

//   const { data: mpdCodes } = useGetMPDCodesQuery({ acTypeID: selectedAcType });
//   const { data: taskCodes } = useGetGroupTaskCodesQuery(
//     { acTypeID: selectedAcType },
//     { skip: !selectedAcType }
//   );

//   const taskCodeMap = useMemo(() => {
//     if (!taskCodes) return {};
//     return taskCodes.reduce((acc: { [key: string]: string }, code) => {
//       acc[code.code] = code.id;
//       return acc;
//     }, {});
//   }, [taskCodes]);

//   // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö
//   const { data: skills } = useGetSkillsQuery({});

//   // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//   const skillCodesTable = useMemo(() => {
//     if (!skills) return [];

//     return skills.map((skill) => [
//       skill.code,
//       skill.name || skill.description || skill.code,
//     ]);
//   }, [skills]);

//   const additionalSelects: AdditionalSelect[] = [
//     {
//       key: 'acTypeId',
//       label: 'SELECT_AC_TYPE',
//       options: (acTypes || []).map((acType) => ({
//         value: acType.id,
//         label: acType.name,
//       })),
//       required: true,
//       width: 400,
//     },
//     {
//       key: 'mpdDocumentationId',
//       label: 'SELECT_MPD_CODES',
//       options: (mpdCodes || []).map((mpdCode) => ({
//         value: mpdCode.id,
//         label: mpdCode.code,
//       })),
//       mode: 'multiple',
//       dependsOn: 'acTypeId',
//       width: 400,
//     },
//   ];

//   const [selectedMpdCodes, setSelectedMpdCodes] = useState<string[]>([]);

//   const onSelectChange = (key: string, value: any) => {
//     if (key === 'acTypeId') {
//       setSelectedAcType(value);
//       setSelectedMpdCodes([]);
//     } else if (key === 'mpdDocumentationId') {
//       setSelectedMpdCodes(value);
//     }
//   };

//   // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–ª–∏–¥–∞—Ü–∏–∏
//   const validateData = (data: any[]): ValidationResult[] => {
//     return data.map((row, index) => {
//       const messages: string[] = [];
//       let isValid = true;

//       if (row.ZONE) {
//         console.group(`üîç Validating ZONE for row ${index + 2}`);
//         console.log('üìù Original ZONE value:', row.ZONE);

//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–æ–Ω–∞—Ö
//         console.log('üó∫Ô∏è Zones data status:', {
//           hasZonesData: !!zones,
//           zonesCount: zones?.length || 0,
//           selectedAcType,
//           hasZonesMap: Object.keys(zonesMap).length > 0,
//         });

//         const zoneCodes = parseZones(row.ZONE);
//         console.log('üî¢ Parsed zone codes:', zoneCodes);
//         console.log('üìö Available zones:', {
//           inMap: Object.keys(zonesMap),
//           mapContent: zonesMap,
//         });

//         // –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞
//         zoneCodes.forEach((code) => {
//           console.log(`Checking zone code "${code}":`, {
//             exists: !!zonesMap[code],
//             mappedId: zonesMap[code] || 'not found',
//           });
//         });

//         const invalidZones = zoneCodes.filter((code) => !zonesMap[code]);

//         if (invalidZones.length > 0) {
//           console.error('‚ùå Invalid zones found:', {
//             invalidZones,
//             availableZones: Object.keys(zonesMap),
//             zonesMap,
//           });

//           messages.push(
//             t('VALIDATION.INVALID_ZONES', {
//               codes: invalidZones.join(', '),
//               availableZones: Object.keys(zonesMap).join(', '),
//             })
//           );
//           isValid = false;
//         }

//         console.groupEnd();
//       }

//       return {
//         row: index + 2,
//         status: isValid ? 'success' : 'error',
//         messages,
//         fieldName: isValid ? undefined : 'ZONE',
//         value: row.ZONE,
//       };
//     });
//   };

//   // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
//   const translations = {
//     ru: {
//       VALIDATION: {
//         TASK_NUMBER_REQUIRED: '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
//         TASK_DESCRIPTION_REQUIRED: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
//         TASK_CODE_REQUIRED: '–ö–æ–¥ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
//         INVALID_TASK_CODE:
//           '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞—á–∏: {{code}}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤',
//         IDENTIFICATOR_REQUIRED: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
//         INVALID_IDENTIFICATOR:
//           '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {{value}}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ROUTINE, SPECIAL, CRITICAL',
//         INTERVAL_REQUIRED: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
//         INVALID_INTERVAL_FORMAT:
//           '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {{value}}. –ü—Ä–∏–º–µ—Ä: 3000 FC, 5000 FH, 12 MO',
//         INTERVAL_REPEAT_REQUIRED:
//           '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
//         INVALID_INTERVAL_REPEAT_FORMAT:
//           '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {{value}}. –ü—Ä–∏–º–µ—Ä: 3000 FC, 5000 FH, 12 MO',
//         JOB_ZONE_REQUIRED: '–ó–æ–Ω–∞ —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
//         MPD_REQUIRED: 'MPD –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
//         INVALID_MPD_FORMAT:
//           '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MPD –∫–æ–¥–∞: {{value}}. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX-XXX-XX',
//         INVALID_TASK_TYPE: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {{type}}',
//         ROW_VALID: '–°—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞',
//         MPD_CODES_REQUIRED: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±–∏—Ä–∞—Ç—å MPD –∫–æ–¥—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º',
//         IS_CRITICAL_TASK_REQUIRED:
//           '–ü–æ–ª–µ isCriticalTask –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
//         INVALID_IS_CRITICAL_TASK: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ isCriticalTask: {{value}}',
//         SKILL_CODES_REQUIRED: '–ö–æ–¥—ã –Ω–∞–≤—ã–∫–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ SMC',
//         INVALID_SKILL_CODES:
//           '–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–¥—ã –Ω–∞–≤—ã–∫–æ–≤: {{codes}}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤',
//         INVALID_ZONES:
//           '–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–¥—ã –∑–æ–Ω: {{codes}}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤',
//       },
//     },
//   };

//   const [selectedTaskType, setSelectedTaskType] = useState<string>('');

//   // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
//   const getTaskFieldsConfig = (currentSkills: any[]) => ({
//     title: 'TASK_FIELDS',
//     type: 'table',
//     headers: ['Field', 'Required', 'Example'],
//     content: {
//       SMC: [
//         ['taskNumber', '‚úì', 'SMC-001'],
//         ['taskDescription', '‚úì', 'Inspect landing gear'],
//         ['code', '‚úì', 'SMC-LG'],
//         ['mainWorkTime', '‚úì', '2.5'],
//         ['skillCodeID', '‚úì', currentSkills?.[0]?.code || 'SKILL1, SKILL2'],
//         ['IDENTIFICATOR', '‚úì', 'ROUTINE'],
//         ['INTERVAL', '‚úì', '3000 FC'],
//         ['INTERVAL_REPEAT', '‚úì', '3000 FC'],
//         ['JOB_ZONE', '‚úì', 'FUS'],
//         ['MPD', '‚úì', '25-170-00'],
//       ],
//       HARD_ACCESS: [
//         ['taskNumber', '‚úì', 'HA-001'],
//         ['taskDescription', '‚úì', 'Remove panel 125'],
//         ['code', '‚úì', 'HA-HYD'],
//         ['mainWorkTime', '‚úì', '2.5'],
//         ['skillCodeID', '‚úì', currentSkills?.[0]?.code || 'SKILL1'],
//         ['OPEN_MHR', '‚úì', '1.0'],
//         ['CLOSE_MHR', '‚úì', '1.0'],
//       ],
//       PART_PRODUCE: [
//         ['taskNumber', '‚úì', 'PP-001'],
//         ['taskDescription', '‚úì', 'Produce bracket assembly'],
//         ['code', '‚úì', 'PP-BA'],
//         ['mainWorkTime', '‚úì', '4.0'],
//         ['skillCodeID', '‚úì', currentSkills?.[0]?.code || 'SKILL1'],
//         ['title', '‚úì', 'Bracket Assembly'],
//         ['amtoss', '‚úì', 'DWG-123-456'],
//       ],
//     },
//   });

//   const getSkillCodesConfig = (currentSkillCodesTable: any[]) => ({
//     title: 'SKILL_CODES',
//     type: 'table',
//     headers: ['Code', 'Description'],
//     content: currentSkillCodesTable,
//   });

//   const getTaskCodesConfig = () => {
//     const availableCodes =
//       taskCodes?.map((code) => [
//         code.code,
//         code.description || code.code,
//         `${code.code}-001`,
//       ]) || [];

//     return {
//       title: 'TASK_CODES',
//       type: 'table',
//       headers: ['Code', 'Description', 'Example'],
//       content: availableCodes,
//     };
//   };

//   const getTaskTypeInstructions = (taskType: string) => {
//     const taskFieldsConfig = getTaskFieldsConfig(skills || []);
//     const skillCodesConfig = getSkillCodesConfig(skillCodesTable);
//     const intervalsConfig = getIntervalsConfig();
//     const textInstructions = getTextInstructionsConfig(taskType);
//     const taskCodesConfig = getTaskCodesConfig();

//     return {
//       tabs: [
//         {
//           key: 'instructions',
//           label: t('INSTRUCTIONS'),
//           content: textInstructions,
//         },
//         {
//           key: 'fields',
//           label: t('REQUIRED_FIELDS'),
//           content: {
//             type: 'table',
//             ...taskFieldsConfig,
//             content:
//               taskFieldsConfig.content[
//                 taskType as keyof typeof taskFieldsConfig.content
//               ],
//           },
//         },
//         {
//           key: 'task_codes',
//           label: t('TASK_CODES'),
//           content: taskCodesConfig,
//         },
//         {
//           key: 'skills',
//           label: t('AVAILABLE_SKILLS'),
//           content: skillCodesConfig,
//         },
//         {
//           key: 'zones',
//           label: t('AVAILABLE_ZONES'),
//           content: {
//             type: 'custom',
//             component: <ZonesTab zones={zones} />,
//           },
//         },
//         ...(taskType === 'SMC'
//           ? [
//               {
//                 key: 'intervals',
//                 label: t('INTERVAL_FORMATS'),
//                 content: intervalsConfig,
//               },
//             ]
//           : []),
//       ],
//     };
//   };

//   const getTemplateConfig = (taskType: string) => ({
//     fields: [
//       // –ë–∞–∑–æ–≤—ã–µ –æ–ª—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
//       {
//         name: 'taskNumber',
//         displayName: t('TASK_NUMBER'),
//         required: true,
//         description: 'TASK_NUMBER_DESCRIPTION',
//         example: 'TASK-001',
//         width: 15,
//       },
//       {
//         name: 'taskDescription',
//         displayName: t('TASK_DESCRIPTION'),
//         required: true,
//         description: 'TASK_DESCRIPTION_HELP_TEXT',
//         example: 'Replace the wheel assembly',
//         width: 40,
//       },
//       {
//         name: 'mainWorkTime',
//         displayName: t('MHS '),
//         required: true,
//         description: 'MHS_DESCRIPTION',
//         example: '10',
//         width: 15,
//         validation: (value: string) => {
//           const pattern = /^\d+(\.\d{1,2})?$/;
//           return pattern.test(value);
//         },
//       },
//       {
//         name: 'code',
//         displayName: t('TASK_CODE '),
//         required: true,
//         description: 'TASK_CODE_DESCRIPTION',
//         example: 'GVI',
//         width: 15,
//         validation: (value: string) => {
//           console.log('Validating code:', value);
//           console.log('Available codes:', Object.keys(taskCodeMap));

//           // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥ –≤ –º–∞–ø–µ
//           const isValid = !!taskCodeMap[value];

//           if (!isValid) {
//             console.log(
//               `Code ${value} not found in available codes:`,
//               taskCodeMap
//             );
//           }

//           return isValid;
//         },
//       },
//       {
//         name: 'title', // –î–æ–±–∞–≤–ª—è–µ–º title
//         displayName: t('TASK_TITLE'),
//         required: true,
//         description: 'TASK_TITLE_DESCRIPTION',
//         example: 'Wheel Assembly Replacement',
//         width: 30,
//         validation: (value: string) => {
//           return value.length > 0;
//         },
//       },
//       {
//         name: 'amtoss', // –î–æ–±–∞–≤–ª—è–µ–º amtoss
//         displayName: t('AMTOSS'),
//         required: true,
//         description: 'AMTOSS_DESCRIPTION',
//         example: 'AMM 32-41-11',
//         width: 20,
//         validation: (value: string) => {
//           return value.length > 0;
//         },
//       },
//       {
//         name: 'isCriticalTask',
//         displayName: t('IS_CRITICAL_TASK'),
//         required: true,
//         description: t('IS_CRITICAL_TASK_DESCRIPTION'),
//         example: 'true',
//         width: 15,
//         validation: (value: any) => {
//           const strValue = String(value).toLowerCase();
//           return strValue === 'true' || strValue === 'false';
//         },
//       },
//       {
//         name: 'skillCodeID',
//         displayName: t('SKILL_CODES'),
//         required: true,
//         description: t('SKILL_CODES_DESCRIPTION'),
//         example: 'AVI',
//         width: 20,
//       },
//       // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è SMC
//       ...(taskType === 'SMC'
//         ? [
//             {
//               name: 'IDENTIFICATOR',
//               displayName: t('IDENTIFICATOR'),
//               required: true,
//               description: 'IDENTIFICATOR_DESCRIPTION',
//               example: 'ROUTINE',
//               width: 15,
//               validation: (value: string) =>
//                 ['ROUTINE', 'SPECIAL', 'CRITICAL'].includes(value),
//             },
//             {
//               name: 'INTERVAL',
//               displayName: t('INTERVAL '),
//               required: true,
//               description: 'INTERVAL_DESCRIPTION',
//               example: '3000 FC',
//               width: 15,
//               validation: (value: string) => {
//                 const pattern = /^\d+\s*(FC|FH|MO|YR|WK|DY)$/i;
//                 return pattern.test(value);
//               },
//             },
//             {
//               name: 'INTERVAL_REPEAT',
//               displayName: t('INTERVAL_REPEAT '),
//               required: true,
//               description: 'INTERVAL_REPEAT_DESCRIPTION',
//               example: '3000 FC',
//               width: 15,
//               validation: (value: string) => {
//                 const pattern = /^\d+\s*(FC|FH|MO|YR|WK|DY)$/i;
//                 return pattern.test(value);
//               },
//             },
//             {
//               name: 'JOB_ZONE',
//               displayName: t('JOB_ZONE'),
//               required: true,
//               description: 'JOB_ZONE_DESCRIPTION',
//               example: 'FUS',
//               width: 15,
//             },
//             {
//               name: 'MPD',
//               displayName: t('MPD '),
//               required: true,
//               description: 'MPD_DESCRIPTION',
//               example: '25-170-00',
//               width: 15,
//               validation: (value: string) => {
//                 return value.length > 0;
//               },
//             },
//             {
//               name: 'zonesID',
//               displayName: t('ZONE'),
//               required: true,
//               description: t('ZONE_DESCRIPTION'),
//               example: '100,200+300\n400',
//               width: 20,
//               validation: (value: string) => {
//                 if (!value) return false;
//                 const codes = parseZones(value);
//                 return codes.every((code) => !!zonesMap[code]);
//               },
//             },
//           ]
//         : []),
//       ...(taskType === 'HARD_ACCESS'
//         ? [
//             {
//               name: 'OPEN_MHR',
//               displayName: t('OPEN_MHR'),
//               required: true,
//               description: 'OPEN_MHR_DESCRIPTION',
//               example: '1.0',
//               width: 15,
//             },
//             {
//               name: 'CLOSE_MHR',
//               displayName: t('CLOSE_MHR'),
//               required: true,
//               description: 'CLOSE_MHR_DESCRIPTION',
//               example: '1.0',
//               width: 15,
//             },
//           ]
//         : []),
//     ],
//     templateFileName: `tasks_template_${taskType.toLowerCase()}.xlsx`,
//     additionalInstructions: getTaskTypeInstructions(taskType),
//   });

//   // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–≤—ã–∫–æ–≤
//   const { data: usersGroup } = useGetSkillsQuery({});

//   // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –Ω–∞–≤—ã–∫–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
//   const skillsMap = useMemo(() => {
//     console.log('Creating skills map from:', usersGroup);
//     if (!usersGroup) return {};

//     const map = usersGroup.reduce(
//       (acc: { [key: string]: string }, skill: any) => {
//         // –ò—Å–ø–æ–ª—å–∑—É–µ–º _id –≤–º–µ—Å—Ç–æ id
//         acc[skill.code] = skill._id || skill.id;
//         return acc;
//       },
//       {}
//     );

//     console.log('Available skill codes:', Object.keys(map));
//     console.log('Skills map:', map);
//     return map;
//   }, [usersGroup]);

//   // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é validateZone
//   const validateZone = (zoneCode: string): string | null => {
//     console.group(`üîç Validating zone: ${zoneCode}`);

//     if (!zones || !zoneCode) {
//       console.log('‚ö†Ô∏è No zones data or empty code');
//       console.groupEnd();
//       return null;
//     }

//     // –ò—â–µ–º –∑–æ–Ω—É –ø–æ majoreZoneNbr
//     const matchingZones = zones.filter(
//       (zone) => zone.majoreZoneNbr.toString() === zoneCode.toString()
//     );

//     if (matchingZones.length === 0) {
//       console.log(`‚ùå No zones found for code: ${zoneCode}`);
//       console.groupEnd();
//       return null;
//     }

//     // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–æ–Ω—É
//     const zoneId = matchingZones[0]._id;
//     console.log(`‚úÖ Found zone: ${zoneId}`);
//     console.groupEnd();
//     return zoneId;
//   };

//   // –û–±–Ω–æ–≤–ª—è–µ–º handleAddMultiItems
//   const handleAddMultiItems = async (data: any) => {
//     try {
//       console.group('üîÑ Processing import data');
//       console.log('Initial data:', data);

//       const processedData = data.map((item: any) => {
//         const {
//           code,
//           skillCodeID,
//           zonesID: inputZonesID,
//           isCriticalTask, // —è–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —ç—Ç–æ –ø–æ–ª–µ
//           ...restItem
//         } = item;

//         // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–∞–º–∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –º–∞—Å—Å–∏–≤ ID
//         const processedSkillCodeID =
//           typeof skillCodeID === 'string'
//             ? [skillsMap[skillCodeID]]
//             : Array.isArray(skillCodeID)
//             ? skillCodeID
//             : [];

//         // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–Ω
//         let processedZonesID: string[] = [];
//         if (inputZonesID) {
//           const zoneNumbers = inputZonesID
//             .split(/[,+\s]+/)
//             .map((z) => z.trim())
//             .filter(Boolean);

//           processedZonesID = zoneNumbers
//             .map((zoneNumber) => {
//               const matchingZone = zones?.find(
//                 (zone) => zone.majoreZoneNbr.toString() === zoneNumber
//               );
//               return matchingZone?._id;
//             })
//             .filter((id): id is string => id !== null && id !== undefined);
//         }

//         return {
//           ...restItem,
//           code: taskCodeMap[code] || code,
//           skillCodeID: processedSkillCodeID,
//           zonesID: processedZonesID,
//           // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º isCriticalTask –≤ boolean
//           isCriticalTask: isCriticalTask?.toString().toLowerCase() === 'true',
//         };
//       });

//       console.log('Final processed data:', processedData);
//       console.groupEnd();

//       const response = await addMultiTask({
//         taskNumberDTO: processedData,
//       }).unwrap();

//       notification.success({
//         message: t('SUCCESS'),
//         description: t('TASKS_IMPORTED_SUCCESSFULLY'),
//       });
//     } catch (error) {
//       console.error('Import error:', error);
//       notification.error({
//         message: t('ERROR'),
//         description:
//           error instanceof Error ? error.message : t('ERROR_IMPORTING_TASKS'),
//       });
//     }
//   };

//   // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ JOB_ZONE –≤ –∫–æ–¥—ã –∑–æ–Ω
//   const getZoneCodesFromJobZone = (jobZone: string): string[] => {
//     const zoneMap: { [key: string]: string[] } = {
//       FUS: ['100', '200'],
//       WING: ['500', '600'],
//       TAIL: ['300'],
//       LG: ['700'],
//       // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
//     };

//     return zoneMap[jobZone] || [];
//   };

//   const transformedTasks = useMemo(() => {
//     return transformToITask(tasksQuery || []);
//   }, [tasksQuery]);
//   const { data: partNumbers } = useGetPartNumbersQuery({});

//   useEffect(() => {
//     if (values) {
//       console.log('Refetching with values:', values);
//       refetchTasks();
//     }
//   }, [values, refetchTasks]);

//   // –í useEffect –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω
//   useEffect(() => {
//     console.log('Zones loading status:', {
//       selectedAcType,
//       isZonesLoading: zonesLoading,
//       hasZones: !!zones,
//       zonesCount: zones?.length || 0,
//     });
//   }, [selectedAcType, zones, zonesLoading]);

//   return (
//     <>
//       <Space className="gap-6 pb-3">
//         <Col>
//           <PermissionGuard requiredPermissions={[Permission.TASK_ACTIONS]}>
//             <Button
//               size="small"
//               icon={<PlusSquareOutlined />}
//               onClick={handleCreate}
//             >
//               {t('ADD TASK')}
//             </Button>
//           </PermissionGuard>
//         </Col>
//         <PermissionGuard requiredPermissions={[Permission.TASK_ACTIONS]}>
//           <Space className="gap-6">
//             <FileUploaderV2
//               templateConfig={getTemplateConfig(selectedTaskType)}
//               onFileProcessed={handleAddMultiItems}
//               buttonText="IMPORT_TASKS"
//               modalTitle="IMPORT_TASKS"
//               tooltipText="CLICK_TO_VIEW_TASK_TEMPLATE"
//               additionalSelects={[
//                 ...additionalSelects,
//                 {
//                   key: 'taskType',
//                   label: 'SELECT_TASK_TYPE',
//                   options: Object.entries(valueEnumTaskType).map(
//                     ([key, value]) => ({
//                       value: key,
//                       label: value,
//                     })
//                   ),
//                   required: true,
//                   width: 400,
//                   onChange: (value: any) => setSelectedTaskType(value),
//                 },
//               ]}
//               onSelectChange={(key, value) => {
//                 if (key === 'acTypeId') {
//                   setSelectedAcType(value);
//                 } else if (key === 'taskType') {
//                   setSelectedTaskType(value);
//                 }
//               }}
//             />
//           </Space>
//         </PermissionGuard>
//         <Col style={{ textAlign: 'right' }}>
//           {
//             <PermissionGuard requiredPermissions={[Permission.TASK_ACTIONS]}>
//               <Button
//                 disabled={!selectedItems?.length}
//                 size="small"
//                 icon={<MinusSquareOutlined />}
//                 onClick={() => handleDelete(selectedItems)}
//               >
//                 {t('DELETE TASK')}
//               </Button>
//             </PermissionGuard>
//           }
//         </Col>
//         <Col>
//           <Switch
//             checkedChildren="Table"
//             unCheckedChildren="Tree"
//             defaultChecked
//             onChange={() => setIsTreeView(!isTreeView)}
//           />
//         </Col>
//       </Space>

//       <div className="flex justify-between">
//         <Split initialPrimarySize="35%" splitterSize="20px">
//           <div className="h-[72vh] bg-white px-4 rounded-md border-gray-400 p-3">
//             {isTreeView ? (
//               <>
//                 {tasksQuery && tasksQuery.length ? (
//                   <AdminTaskPanelTree
//                     onTaskSelect={handleEdit}
//                     tasks={tasksQuery || []}
//                     isLoading={isFetchungQuery || isLoading}
//                     onCheckItems={function (items: any): void {
//                       return setSelectedItems(items);
//                     }}
//                   />
//                 ) : (
//                   <Empty />
//                 )}
//               </>
//             ) : (
//               <UniversalAgGrid
//                 gridId="taskList"
//                 pagination={true}
//                 isChekboxColumn={true}
//                 columnDefs={columnDefs}
//                 rowData={transformedTasks || []}
//                 onRowSelect={function (rowData: any | null): void {
//                   handleEdit(rowData[0]);
//                 }}
//                 height={'65vh'}
//                 onCheckItems={(items: React.Key[]): void => {
//                   setSelectedItems(items);
//                 }}
//                 isLoading={isLoading || isFetchungQuery}
//               />
//             )}
//           </div>
//           <div className="h-[70vh] bg-white px-4 rounded-md border-gray-400 p-3 overflow-y-auto">
//             {
//               <AdminTaskPanelForm
//                 task={editingvendor || undefined}
//                 onSubmit={handleSubmit}
//               />
//             }
//           </div>
//         </Split>
//       </div>
//     </>
//   );
// };

// export default AdminTaskPanel;
